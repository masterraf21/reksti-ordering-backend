// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/masterraf21/reksti-ordering-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// MenuUsecase is an autogenerated mock type for the MenuUsecase type
type MenuUsecase struct {
	mock.Mock
}

// CreateMenu provides a mock function with given fields: ctx, order
func (_m *MenuUsecase) CreateMenu(ctx context.Context, order *models.Menu) (uint32, error) {
	ret := _m.Called(ctx, order)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *models.Menu) uint32); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Menu) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateType provides a mock function with given fields: ctx, m
func (_m *MenuUsecase) CreateType(ctx context.Context, m *models.MenuType) (uint32, error) {
	ret := _m.Called(ctx, m)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *models.MenuType) uint32); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.MenuType) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMenu provides a mock function with given fields: ctx, id
func (_m *MenuUsecase) DeleteMenu(ctx context.Context, id uint32) (models.MenuComp, error) {
	ret := _m.Called(ctx, id)

	var r0 models.MenuComp
	if rf, ok := ret.Get(0).(func(context.Context, uint32) models.MenuComp); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.MenuComp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteType provides a mock function with given fields: ctx, id
func (_m *MenuUsecase) DeleteType(ctx context.Context, id uint32) (*models.MenuType, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.MenuType
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *models.MenuType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MenuType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MenuUsecase) GetAll() ([]models.MenuComp, error) {
	ret := _m.Called()

	var r0 []models.MenuComp
	if rf, ok := ret.Get(0).(func() []models.MenuComp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MenuComp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllType provides a mock function with given fields:
func (_m *MenuUsecase) GetAllType() ([]models.MenuType, error) {
	ret := _m.Called()

	var r0 []models.MenuType
	if rf, ok := ret.Get(0).(func() []models.MenuType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MenuType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MenuUsecase) GetByID(id uint32) (models.MenuComp, error) {
	ret := _m.Called(id)

	var r0 models.MenuComp
	if rf, ok := ret.Get(0).(func(uint32) models.MenuComp); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.MenuComp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
