// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/masterraf21/reksti-ordering-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderUsecase is an autogenerated mock type for the OrderUsecase type
type OrderUsecase struct {
	mock.Mock
}

// BulkCreateOrders provides a mock function with given fields: ctx, orders
func (_m *OrderUsecase) BulkCreateOrders(ctx context.Context, orders []models.Order) error {
	ret := _m.Called(ctx, orders)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Order) error); ok {
		r0 = rf(ctx, orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderUsecase) CreateOrder(ctx context.Context, order *models.Order) (uint32, error) {
	ret := _m.Called(ctx, order)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) uint32); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderDetail provides a mock function with given fields: ctx, orderID, orderD
func (_m *OrderUsecase) CreateOrderDetail(ctx context.Context, orderID uint32, orderD *models.OrderDetails) error {
	ret := _m.Called(ctx, orderID, orderD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, *models.OrderDetails) error); ok {
		r0 = rf(ctx, orderID, orderD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrders provides a mock function with given fields:
func (_m *OrderUsecase) GetAllOrders() ([]models.Order, error) {
	ret := _m.Called()

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func() []models.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOngoingOrdersyByCustID provides a mock function with given fields: customerID
func (_m *OrderUsecase) GetOngoingOrdersyByCustID(customerID uint32) ([]models.Order, error) {
	ret := _m.Called(customerID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(uint32) []models.Order); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: orderID
func (_m *OrderUsecase) GetOrderByID(orderID uint32) (*models.Order, error) {
	ret := _m.Called(orderID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uint32) *models.Order); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderWithDetails provides a mock function with given fields: orderID
func (_m *OrderUsecase) GetOrderWithDetails(orderID uint32) (models.OrderWithDetails, error) {
	ret := _m.Called(orderID)

	var r0 models.OrderWithDetails
	if rf, ok := ret.Get(0).(func(uint32) models.OrderWithDetails); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(models.OrderWithDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByCustID provides a mock function with given fields: customerID
func (_m *OrderUsecase) GetOrdersByCustID(customerID uint32) ([]models.Order, error) {
	ret := _m.Called(customerID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(uint32) []models.Order); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersHistoryByCustID provides a mock function with given fields: customerID
func (_m *OrderUsecase) GetOrdersHistoryByCustID(customerID uint32) ([]models.Order, error) {
	ret := _m.Called(customerID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(uint32) []models.Order); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, orderID, order
func (_m *OrderUsecase) UpdateOrder(ctx context.Context, orderID uint32, order *models.Order) error {
	ret := _m.Called(ctx, orderID, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, *models.Order) error); ok {
		r0 = rf(ctx, orderID, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
