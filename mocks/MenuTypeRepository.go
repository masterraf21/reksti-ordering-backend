// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/masterraf21/reksti-ordering-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// MenuTypeRepository is an autogenerated mock type for the MenuTypeRepository type
type MenuTypeRepository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: ctx, mtypeID
func (_m *MenuTypeRepository) DeleteByID(ctx context.Context, mtypeID uint32) error {
	ret := _m.Called(ctx, mtypeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, mtypeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MenuTypeRepository) GetAll() ([]models.MenuType, error) {
	ret := _m.Called()

	var r0 []models.MenuType
	if rf, ok := ret.Get(0).(func() []models.MenuType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MenuType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: menuTypeID
func (_m *MenuTypeRepository) GetByID(menuTypeID uint32) (*models.MenuType, error) {
	ret := _m.Called(menuTypeID)

	var r0 *models.MenuType
	if rf, ok := ret.Get(0).(func(uint32) *models.MenuType); ok {
		r0 = rf(menuTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MenuType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(menuTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, mtype
func (_m *MenuTypeRepository) Update(ctx context.Context, mtype *models.MenuType) error {
	ret := _m.Called(ctx, mtype)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.MenuType) error); ok {
		r0 = rf(ctx, mtype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
