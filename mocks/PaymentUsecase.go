// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/masterraf21/reksti-ordering-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// PaymentUsecase is an autogenerated mock type for the PaymentUsecase type
type PaymentUsecase struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: ctx, payment
func (_m *PaymentUsecase) CreatePayment(ctx context.Context, payment *models.Payment) (uint32, error) {
	ret := _m.Called(ctx, payment)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) uint32); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, paymentID
func (_m *PaymentUsecase) DeleteByID(ctx context.Context, paymentID uint32) error {
	ret := _m.Called(ctx, paymentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PaymentUsecase) GetAll() ([]models.Payment, error) {
	ret := _m.Called()

	var r0 []models.Payment
	if rf, ok := ret.Get(0).(func() []models.Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: paymentID
func (_m *PaymentUsecase) GetByID(paymentID uint32) (*models.Payment, error) {
	ret := _m.Called(paymentID)

	var r0 *models.Payment
	if rf, ok := ret.Get(0).(func(uint32) *models.Payment); ok {
		r0 = rf(paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
