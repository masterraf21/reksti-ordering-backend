// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/masterraf21/reksti-ordering-backend/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// BulkInsert provides a mock function with given fields: ctx, orders
func (_m *OrderRepository) BulkInsert(ctx context.Context, orders []models.Order) error {
	ret := _m.Called(ctx, orders)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Order) error); ok {
		r0 = rf(ctx, orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, OrderID
func (_m *OrderRepository) DeleteByID(ctx context.Context, OrderID uint32) error {
	ret := _m.Called(ctx, OrderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, OrderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *OrderRepository) GetAll() ([]models.Order, error) {
	ret := _m.Called()

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func() []models.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCustID provides a mock function with given fields: custID
func (_m *OrderRepository) GetByCustID(custID uint32) ([]models.Order, error) {
	ret := _m.Called(custID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(uint32) []models.Order); ok {
		r0 = rf(custID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(custID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: OrderID
func (_m *OrderRepository) GetByID(OrderID uint32) (*models.Order, error) {
	ret := _m.Called(OrderID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(uint32) *models.Order); ok {
		r0 = rf(OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatusAndCustID provides a mock function with given fields: status, custID
func (_m *OrderRepository) GetByStatusAndCustID(status int32, custID uint32) ([]models.Order, error) {
	ret := _m.Called(status, custID)

	var r0 []models.Order
	if rf, ok := ret.Get(0).(func(int32, uint32) []models.Order); ok {
		r0 = rf(status, custID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, uint32) error); ok {
		r1 = rf(status, custID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailsByOrderID provides a mock function with given fields: orderID
func (_m *OrderRepository) GetOrderDetailsByOrderID(orderID uint32) ([]models.OrderDetails, error) {
	ret := _m.Called(orderID)

	var r0 []models.OrderDetails
	if rf, ok := ret.Get(0).(func(uint32) []models.OrderDetails); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrderDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, ord
func (_m *OrderRepository) Store(ctx context.Context, ord *models.Order) (uint32, error) {
	ret := _m.Called(ctx, ord)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) uint32); ok {
		r0 = rf(ctx, ord)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, ord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArbitrary provides a mock function with given fields: ctx, orderID, columnName, value
func (_m *OrderRepository) UpdateArbitrary(ctx context.Context, orderID uint32, columnName string, value interface{}) error {
	ret := _m.Called(ctx, orderID, columnName, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, interface{}) error); ok {
		r0 = rf(ctx, orderID, columnName, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByID provides a mock function with given fields: ctx, orderID, order
func (_m *OrderRepository) UpdateByID(ctx context.Context, orderID uint32, order *models.Order) error {
	ret := _m.Called(ctx, orderID, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, *models.Order) error); ok {
		r0 = rf(ctx, orderID, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *OrderRepository) UpdateOrderStatus(ctx context.Context, orderID uint32, status int32) error {
	ret := _m.Called(ctx, orderID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, int32) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTotalPrice provides a mock function with given fields: ctx, orderID
func (_m *OrderRepository) UpdateTotalPrice(ctx context.Context, orderID uint32) error {
	ret := _m.Called(ctx, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
